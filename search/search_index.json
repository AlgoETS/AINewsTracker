{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> AINewsTracker  </p> <p> </p>"},{"location":"#what-is-ainewstracker","title":"What is AINewsTracker?","text":"<p>AINewsTracker is a sophisticated web application that backtests the influence of financial news on the stock market. It utilizes artificial intelligence to categorize, filter, and analyze financial news from a variety of trustworthy international and regional sources. This allows users to monitor and predict potential impacts on market trends.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About","text":"<p>AINewsTracker is a Python-based web application designed to backtest the influence of financial news on the stock market. By using artificial intelligence, it categorizes, filters, and analyzes financial news from various reputable international and regional sources. This allows users to monitor and predict potential impacts on market trends.</p> <p>AINewsTracker is an incredibly beneficial tool for investors, financial analysts, and anyone interested in understanding the correlation between news and market movement. It can be especially useful for those aiming to refine their investment strategies or develop predictive models. This documentation provides an overview of the application, its features, and how to get started with AINewsTracker.</p>"},{"location":"about/#features","title":"Features","text":"<p>AINewsTracker provides an array of functionalities, including:</p> <p>Real-Time News Tracking: Track financial news as it happens. Stay updated with the most recent and impactful news affecting financial markets.</p> <p>AI-Powered Analysis: Leverage the power of AI to analyze and categorize news, helping you focus on the most market-impacting news and filter out noise.</p> <p>Backtesting: Not just for tracking current news, use AINewsTracker to backtest and see how specific news or trends could have influenced the market historically, thus aiding in future investment strategies.</p> <p>Trustworthy Sources: Financial news is gathered from reliable international and regional sources, ensuring high-quality, relevant information.</p> <p>User-Friendly Interface: AINewsTracker is built with a user-friendly interface, making the vast amount of information easy to navigate and understand.</p>"},{"location":"about/#dependencies","title":"Dependencies","text":"<p>AINewsTracker utilizes several external libraries for optimal functioning. These dependencies include:</p> <p>FastAPI: A modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.</p> <p>MongoDB: A source-available cross-platform document-oriented database program for high volume data storage.</p> <p>Docker: An open platform for developing, shipping, and running applications to enable the separation of applications from infrastructure.</p> <p>NumPy: A Python library adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays.</p> <p>Pandas: A software library written for data manipulation and analysis, providing data structures and data analysis tools for Python programming language.</p> <p>Jupyter Notebook: An open-source web application that allows the creation and sharing of documents containing live code, equations, visualizations, and narrative text.</p>"},{"location":"api/","title":"API Reference","text":"<p>Go to the Swagger Page in /docs</p>"},{"location":"api/#execute-trading-strategy","title":"Execute Trading Strategy","text":"<ul> <li>Single company <code>GET /execute_trading_strategy/{company}</code>: This endpoint triggers the execution of a trading strategy for a specific company.</li> <li>Multiple companies <code>POST /execute_trading_strategy</code>: This endpoint triggers the execution of a trading strategy for multiple companies.</li> </ul>"},{"location":"api/#news","title":"News","text":"<ul> <li>Create news item <code>POST /news</code>: This endpoint creates a new news item.</li> <li>Read news <code>GET /news/{news_id}</code>: This endpoint retrieves a specific news item using its ID.</li> <li>Read news by name <code>GET /news/{news_name}</code>: This endpoint retrieves all news items with a specific name.</li> <li>Update news item <code>PUT /news/{news_id}</code>: This endpoint updates a specific news item.</li> <li>Delete news item <code>DELETE /news/{news_id}</code>: This endpoint deletes a specific news item.</li> <li>Fetch RSS feed <code>GET /news/rss/{api_key}/{start_date}/{end_date}</code>: This endpoint fetches news from an RSS feed given a specific date range.</li> <li>Fetch GNews articles <code>GET /news/gnews/{api_key}/{query}/{lang}/{country}/{max_results}</code>: This endpoint fetches news from GNews based on a specific query.</li> <li>Fetch feed entries <code>GET /news/entries/{source}/{limit}</code>: This endpoint fetches a limited number of news entries from a specified source.</li> </ul>"},{"location":"api/#companies","title":"Companies","text":"<ul> <li>Create company <code>POST /company</code>: This endpoint creates a new company.</li> <li>Get all companies <code>GET /company</code>: This endpoint retrieves all companies.</li> <li>Get company by ticker <code>GET /company/{ticker}</code>: This endpoint retrieves a specific company using its ticker.</li> </ul>"},{"location":"api/#articles","title":"Articles","text":"<ul> <li>Create article <code>POST /articles</code>: This endpoint creates a new article.</li> <li>Get all articles <code>GET /articles</code>: This endpoint retrieves all articles.</li> <li>Get article <code>GET /articles/{article_id}</code>: This endpoint retrieves a specific article using its ID.</li> <li>Delete article <code>DELETE /articles/{article_id}</code>: This endpoint deletes a specific article.</li> <li>Get score by article ID <code>GET /articles/{article_id}/score</code>: This endpoint retrieves the sentiment score of a specific article.</li> </ul>"},{"location":"contact/","title":"Contact","text":"<p>For any inquiries, questions, or suggestions regarding the AINewsTracker project, you can reach out to us through the following channels:</p>"},{"location":"contact/#github","title":"Github","text":"<p>You can find the source code for the AINewsTracker project on Github at the following location:</p> <p>https://github.com/AINewsTracker</p> <p>For any bug reports, feature requests, or other contributions, you can create an issue or submit a pull request on the repository page.</p>"},{"location":"contact/#linkedin","title":"LinkedIn","text":"<p>You can connect with the developers on LinkedIn:</p> <ul> <li>Antoine Boucher: https://linkedin.com/in/antoineboucher12</li> <li>Mohamed Ilias: https://linkedin.com/in/mohamedilias</li> <li>Makhlouf Hennine: https://linkedin.com/in/makhloufhennine</li> </ul>"},{"location":"contact/#algorithmic-engineering-and-data-science-group-algoets","title":"Algorithmic Engineering and Data Science Group (algoETS)","text":"<p>You can also reach out to us through our group, AlgoETS, which is based at the \u00c9cole de technologie sup\u00e9rieure in Montreal, Canada:</p> <ul> <li>AlgoETS: http://algoets.etsmtl.ca</li> <li>LinkedIn: https://linkedin.com/company/algoets</li> </ul>"},{"location":"contact/#support","title":"Support","text":"<p>Your support helps us maintain and improve the AINewsTracker project. If you find it useful, please consider supporting the project through one of the following options:</p> <p>AlgoETS     - Go to the http://algoets.etsmtl.ca and make a donation or a sponsorship</p> <p>Antoine Boucher</p> <ul> <li> <p>Buy us a coffee: </p> </li> <li> <p>Make a secure donation through Stripe: </p> </li> </ul> <p>Your contributions are greatly appreciated and help us continue developing and improving the AINewsTracker project. Thank you!</p>"},{"location":"diagrams/","title":"Diagrams","text":"<p>This page contains various diagrams illustrating the architecture, design, and workflow of the project.</p>"},{"location":"diagrams/#app-structure-details-diagram","title":"App Structure Details Diagram","text":"<p>The App Structure Details Diagram shows the detailed structure of the application. It illustrates the interactions between classes, services, and repositories within the application, helping you understand the dependencies and relationships within the codebase.</p>"},{"location":"diagrams/#app-structure-diagram","title":"App Structure Diagram","text":"<p>The App Structure Diagram represents the overall structure of the application, giving an overview of the packages and classes. It's useful for getting a bird's eye view of the software's organization.</p>"},{"location":"diagrams/#article-processing-flow-diagram","title":"Article Processing Flow Diagram","text":"<p>The Article Processing Flow Diagram is a flowchart detailing the steps for processing articles within the application. This includes sentiment analysis, ticker detection, topic classification, and text summarization, all critical for understanding and managing the news articles in the system.</p>"},{"location":"diagrams/#deployment-diagram-for-ainewstracker","title":"Deployment Diagram for AINewsTracker","text":"<p>The Deployment Diagram for AINewsTracker represents the deployment process for AINewsTracker, from code release to visualization of data in a production environment. It shows the services involved in the continuous delivery pipeline, making it an essential diagram for understanding how changes in the application are deployed and monitored.</p>"},{"location":"diagrams/#fetch-feed-entries-flow-diagram","title":"Fetch Feed Entries Flow Diagram","text":"<p>The Fetch Feed Entries Flow Diagram shows the process flow for fetching and processing RSS feed entries in our system. It goes from the retrieval of the RSS feed to storing the processed articles in the database, highlighting the steps and actors involved in this critical operation.</p>"},{"location":"diagrams/#seeding-process-diagram","title":"Seeding Process Diagram","text":"<p>The Seeding Process Diagram illustrates the process of seeding data from an external API into the local database and optional CSV file. This diagram is essential for understanding how the system populates its data store.</p>"},{"location":"diagrams/#sentiment-analysis-flow-diagram","title":"Sentiment Analysis Flow Diagram","text":"<p>The Sentiment Analysis Flow Diagram depicts the process of sentiment analysis in our system, a crucial component of the application that helps assess the sentiment or tone of the news articles. It walks through the steps from text tokenization to sentiment prediction.</p>"},{"location":"diagrams/#trading-strategy-diagram","title":"Trading Strategy Diagram","text":"<p>The Trading Strategy Diagram explains the algorithmic trading strategy used in our system based on the sentiment analysis of news articles. This diagram is vital for understanding how the application makes trading decisions.</p>"},{"location":"explanation/","title":"Explanation","text":""},{"location":"explanation/#project-goals","title":"Project Goals","text":"<p>The main objective of AINewsTracker is to leverage AI and machine learning to analyze, understand, and deliver the latest news in the financial sector. Using sophisticated NLP (Natural Language Processing) algorithms, it processes raw news data from multiple sources, extracts relevant information, and provides it in a structured format that's easy to consume and understand.</p> <p>In the current implementation, the project aims to:</p> <ul> <li>Aggregate financial news from multiple sources in real time</li> <li>Extract insights using NLP and machine learning techniques</li> <li>Provide a RESTful API that serves the latest news and insights</li> <li>Deliver this information in a user-friendly and intuitive interface</li> </ul> <p>The project focuses on stock market news but it's designed to be flexible. The techniques applied can easily be adjusted to cover other areas in the financial sector like commodities, forex, cryptocurrency and more.</p>"},{"location":"explanation/#future-directions","title":"Future Directions","text":"<p>As we continue to develop and refine AINewsTracker, we have set a few goals for the future direction of the project:</p> <ol> <li> <p>Expand data sources: We aim to integrate more news sources to provide a more comprehensive view of the financial market.</p> </li> <li> <p>Improve NLP capabilities: We plan to incorporate more advanced NLP techniques to improve the accuracy and depth of our insights.</p> </li> <li> <p>Personalized experience: We're looking into offering user profiles that would allow for personalized news feeds based on user's interests and portfolio.</p> </li> <li> <p>Real-time alerts: Implementing a system to alert users in real-time about major market changes or news regarding their personal portfolio.</p> </li> <li> <p>Market predictions: Combining the power of financial news with other market indicators to provide market trend predictions.</p> </li> </ol>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#how-to-use","title":"How to use","text":"<ol> <li>Setup and activate the Python environment of your choice.</li> </ol> <pre><code>cp .env.example .env\n</code></pre> <ol> <li>Run the following command to install the required dependencies:</li> </ol> <pre><code>pip install poetry\npoetry shell\npoetry install\n</code></pre> <ol> <li>Test the application by running the following command:</li> </ol> <pre><code>poetry run pytest\n</code></pre> <ol> <li>Run the following command to launch FastAPI in development mode:</li> </ol> <pre><code>poetry run uvicorn app.main:app --reload\n</code></pre> <ol> <li>Dockerize the application by running the following command:</li> </ol> <pre><code>docker-compose up --build\n</code></pre>"},{"location":"getting-started/#documentation","title":"Documentation","text":"<p>The documentation of the API is available at the following URL: http://localhost:8000/api/v1/docs</p>"},{"location":"getting-started/#file-structure","title":"File Structure","text":"<pre><code># AINewsTracker.svg &amp; AINewsTracker_transparent.svg: Logo or graphic resources\n# app: Main application code directory\n# \u251c\u2500\u2500 config.py: File that contains the configuration settings of the application\n# \u251c\u2500\u2500 core: Directory that includes essential parts of the application\n# \u251c\u2500\u2500 \u251c\u2500\u2500 database: Includes scripts for managing database connections\n# \u251c\u2500\u2500 \u251c\u2500\u2500 \u251c\u2500\u2500 db.py: Main database module containing connection settings, queries, etc.\n# \u251c\u2500\u2500 \u251c\u2500\u2500 logging.py: File that sets up the logging for the application\n# \u251c\u2500\u2500 \u251c\u2500\u2500 repo: Directory that contains scripts for database operations\n# \u251c\u2500\u2500 \u251c\u2500\u2500 services: Contains service functions for different operations\n# \u251c\u2500\u2500 \u251c\u2500\u2500 telemetry: Directory containing scripts for system logging and monitoring\n# \u251c\u2500\u2500 main.py: Entry point of the application\n# \u251c\u2500\u2500 models: Directory containing the data models used by the application\n# \u251c\u2500\u2500 routers: Directory containing FastAPI routers (request handling logic)\n# \u251c\u2500\u2500 static: Contains static files (images, CSS, JavaScript, etc.)\n# \u251c\u2500\u2500 __version__.py: File that contains the version number of the application\n# CODE_OF_CONDUCT.md: Markdown file outlining the code of conduct for the project\n# CONTRIBUTING.md: Markdown file outlining the guidelines for contributing to the project\n# deploy: Directory for deployment-related files and scripts\n# \u251c\u2500\u2500 docker-compose.yml: Docker Compose file for setting up the production environment\n# \u251c\u2500\u2500 README.md: Markdown file with instructions for deploying the application\n# docker-compose.yml: Docker Compose file for setting up the development environment\n# Dockerfile: Contains instructions for Docker to build an image for the application\n# LICENSE: The license of the project\n# monitoring: Contains configuration files for monitoring tools\n# poetry.lock &amp; pyproject.toml: Configuration files for Python project and dependency management (Poetry)\n# README.md: General project documentation and overview\n# renovate.json: Configuration file for Renovate (automates dependency updates)\n# requirements-dev.txt &amp; requirements.txt: Python dependencies for development and production environments\n# SECURITY.md: Markdown file outlining the security policy of the project\n# Test-AI.ipynb: A Jupyter notebook file for testing AI functionalities\n# tests: Directory for test modules\n# wiki: Directory for additional project documentation or guides\n\n</code></pre>"},{"location":"overview/","title":"AINewsTracker: An Overview","text":""},{"location":"overview/#introduction","title":"Introduction","text":"<p>AINewsTracker is a platform that manages a wide range of data types such as news sources, articles, comments, and company information. These data are interconnected, providing rich context and insights. Below is a simplified overview of these data types and how they interact.</p>"},{"location":"overview/#data-types","title":"Data Types","text":""},{"location":"overview/#1-news-source","title":"1. News Source","text":"<p>This is an example of how a news source might be represented.</p> <pre><code>{\n    'source_name': 'The AI Journal',\n    'topics': ['AI', 'ML'],\n    'country': 'US',\n    'language': 'EN',\n    'type': 'Online',\n    'source_url': 'https://theaijournal.com',\n    'link': 'https://theaijournal.com/latest-news',\n    'last_update': '2023-06-24',\n}\n</code></pre>"},{"location":"overview/#2-article","title":"2. Article","text":"<p>Articles are linked to their respective news source. The example below shows a representation of an article that originates from the news source example above.</p> <pre><code>{\n    'title': 'Latest AI Advancements',\n    'url': 'https://theaijournal.com/latest-ai-advancements',\n    'publishedDate': '2023-06-24',\n    'text': 'This article discusses the latest advancements in AI...',\n    'source_name': 'The AI Journal',  // Derived from the `source_name` field in the news source.\n    'sentiment': 'Positive',\n    'author': 'John Doe',\n    'company': 'Google Inc.',\n}\n</code></pre>"},{"location":"overview/#3-comment","title":"3. Comment","text":"<p>Comments are linked to their respective articles. Here's an example:</p> <pre><code>{\n    'content': 'Great article!',\n    'date': '2023-06-24',\n    'article_id': 'https://theaijournal.com/latest-ai-advancements',  // Linked to the article via the `url` field.\n}\n</code></pre>"},{"location":"overview/#4-company","title":"4. Company","text":"<p>Companies are linked to articles that mention them. Here's an example:</p> <pre><code>{\n    'symbol': 'GOOG',\n    'name': 'Google Inc.',\n    'sector': 'Technology',\n}\n</code></pre>"},{"location":"overview/#data-relations-diagram","title":"Data Relations Diagram","text":"<p>Here's a simple PlantUML diagram illustrating the relationships between these entities:</p> <pre><code>@startuml\nentity \"News\" as news {\n  source_name: string\n  topics: list\n  country: string\n  language: string\n  type: string\n  source_url: url\n  link: url\n  last_update: date\n}\n\nentity \"Article\" as article {\n  title: string\n  url: url\n  publishedDate: date\n  text: text\n  source_name: ref\n  sentiment: string\n  author: string\n  company: ref\n}\n\nentity \"Comment\" as comment {\n  content: text\n  date: date\n  article_id: ref\n}\n\nentity \"Company\" as company {\n  symbol: string\n  name: string\n  sector: string\n}\n\nnews -- article : produces &gt;\narticle -- comment : has &gt;\narticle -- company : mentions &gt;\n@enduml\n</code></pre>"},{"location":"overview/#nlp-operations","title":"NLP Operations","text":"<p>Using Natural Language Processing, AINewsTracker can perform operations such as sentiment analysis and ticker detection on articles. Here are examples of how these operations might be represented:</p>"},{"location":"overview/#sentiment-analysis","title":"Sentiment Analysis","text":"<pre><code>{\n    'title': 'Latest AI Advancements',\n    'url': 'https://theaijournal.com/latest-ai-advancements',\n    'sentiment_score': 0.8,  // The sentiment score of the article text.\n    'sentiment': 'Positive',  // The sentiment of the article, determined based on the sentiment score.\n}\n</code></pre>"},{"location":"overview/#ticker-detection","title":"Ticker Detection","text":"<pre><code>{\n    'title': 'Latest AI Advancements',\n    'url': 'https://theaijournal.com/latest-ai-advancements',\n    'tickers': ['GOOG'],  // The ticker symbols found in the article text.\n}\n</code></pre>"},{"location":"overview/#summary-extraction","title":"Summary Extraction","text":"<p>Another essential feature offered by AINewsTracker is the capability to extract summary information from an article using NLP techniques. This can be beneficial for users who need to understand the gist of an article quickly. Here's an example of how the summary extraction for an article might be represented:</p> <pre><code>{\n    'title': 'Latest AI Advancements',\n    'url': 'https://theaijournal.com/latest-ai-advancements',\n    'summary': 'This article discusses the latest advancements in AI, highlighting major breakthroughs made by Google Inc...',\n}\n</code></pre> <p>In this example, the 'summary' field contains a concise overview of the article's content, providing quick insight into the article's main points. This brief overview is generated using advanced NLP techniques that identify and summarize the most critical information from the article text.</p> <p>Please note that the quality and accuracy of the summary can depend on various factors, including the complexity of the article's content and the efficiency of the NLP algorithm used for summary extraction.</p>"},{"location":"overview/#topic-classification","title":"Topic Classification","text":"<p>Topic classification is a crucial NLP operation where we determine the topics that an article discusses. This can help categorize the articles for easier access and understand the main areas covered in the text. Here's an example of how the topic classification for an article might be represented:</p> <pre><code>{\n    'title': 'Latest AI Advancements',\n    'url': 'https://theaijournal.com/latest-ai-advancements',\n    'topics': ['AI', 'Machine Learning', 'Google'],  // The main topics found in the article text.\n}\n</code></pre> <p>In this example, the 'topics' field contains a list of the main subjects that the article discusses. The topic classification is conducted using sophisticated NLP techniques, which examine the text and identify key themes.</p>"},{"location":"overview/#note","title":"Note","text":"<p>These examples provide a basic understanding of the data types and operations in AINewsTracker. The actual data structures may be more complex and contain additional fields. For detailed definitions, please refer to the Pydantic model classes (<code>News</code>, <code>Article</code>, <code>Comment</code>, <code>Company</code>) in the AINewsTracker codebase.</p>"},{"location":"refences/","title":"Reference","text":""},{"location":"refences/#references","title":"References","text":"<p>Below are some of the core components, tools, and APIs used in the development and operation of AINewsTracker:</p> <ul> <li>FastAPI: A modern, fast web framework for building APIs with Python 3.6+.</li> <li>MongoDB: A cross-platform document-oriented database program.</li> <li>Docker: An open platform for developing, shipping, and running applications.</li> <li>NumPy: A Python library providing support for large, multi-dimensional arrays and matrices.</li> <li>Pandas: A Python library for data manipulation and analysis.</li> <li>Jupyter Notebook: An open-source web application for creating and sharing documents that contain live code, equations, visualizations and narrative text.</li> <li>Finnhub: A RESTful API that provides real-time stock data, financial statements, sector performance, and more.</li> <li>FinancialModelingPrep: An API providing real-time and historical stock data as well as company financial statements.</li> <li>Binance: An API for the Binance trading platform, which includes endpoints for spot trading, margin trading, and futures trading.</li> <li>Seeking Alpha: A crowd-sourced content service for financial markets. Articles and research cover a broad range of stocks, asset classes, ETFs, and investment strategies.</li> </ul>"},{"location":"refences/#acknowledgements","title":"Acknowledgements","text":"<p>The documentation of AINewsTracker was built using the following tools:</p> <ul> <li>MkDocs: A static site generator for building project documentation.</li> <li>mkdocstrings: An MkDocs plugin to automatically document Python projects.</li> <li>Material for MkDocs: A material design theme for MkDocs.</li> </ul> <p>We express our gratitude to all developers and contributors.</p> <p>@antoinebou12 antoinebou12 Antoine Boucher @mrBlackHat777 mrBlackHat777 Mohamed Ilias @makhlouf1102 makhlouf1102 Makhlouf Hennine</p>"}]}